package ${packageName}.controller;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import ${packageName}.manager.${upClassName}OperateManager;
import ${packageName}.manager.${upClassName}QueryManager;
import ${packageName}.dao.model.${upClassName};

import javax.validation.Valid;
import java.util.List;
import java.util.Map;

${classTitle}
@Controller
public class ${upClassName}Controller {

    /** sl4j */
	private Logger LOGGER = Logger.getLogger(${upClassName}Controller.class);
	
	@Autowired
	private ${upClassName}OperateManager ${lowClassName}OperateManager;

	@Autowired
	private ${upClassName}QueryManager ${lowClassName}QueryManager;

    /**
     * 分页查询${upClassName}
     *
     * @param ${lowClassName}VO
     * @param modelMap
     * @return
     */
	@RequestMapping(value="/${lowClassName}/find${upClassName}ByPage", method = {RequestMethod.GET, RequestMethod.POST})
    public String find${upClassName}ByPage(${upClassName}VO ${lowClassName}VO, ModelMap modelMap){
        // 分页查询请求
        PagingRequest pagingRequest = new PagingRequest();
        pagingRequest.setPageNo(salesOrderQueryVo.getPageNo());
        pagingRequest.setPageSize(salesOrderQueryVo.getPageSize());
        pagingRequest.desc("${columnPrimaryKey}");

        // 分页查询
        Paging<${upClassName}> paging = ${lowClassName}QueryManager.find${upClassName}ByPage(${lowClassName}VO, pagingRequest);
        modelMap.addAttribute("paging", paging);

        return "/v/${lowClassName}/${lowClassName}list";
    }

	/**
     * 查询${upClassName}详情
     *
     * @param orderNo
     * @param modelMap
     * @return
     */
    @RequestMapping(value = "/${lowClassName}/find${upClassName}By${primaryKey}", method = RequestMethod.GET)
    public String find${upClassName}By${primaryKey}(@RequestParam(required = true) ${primaryKeyType} ${normalPrimaryKey}, ModelMap modelMap) {
        ${upClassName} ${lowClassName} = ${lowClassName}QueryManager.find${upClassName}By${primaryKey}(${normalPrimaryKey});
        modelMap.addAttribute("${lowClassName}", ${lowClassName});
        return "/v/${lowClassName}/${lowClassName}detail";
    }

    /**
     * 增加${upClassName}
     *
     * @param orderNo
     * @param modelMap
     * @return
     */
    @RequestMapping(value = "/${lowClassName}/add${upClassName}", method = RequestMethod.POST)
    public String add${upClassName}(@Valid ${upClassName} ${lowClassName}, ModelMap modelMap) {
        try {
            ${lowClassName}OperateManager.add${upClassName}(${lowClassName});
            LOGGER.info("增加${lowClassName}成功, ${lowClassName}=" + ${lowClassName});
        } catch (${upClassName}Exception ex) {
            LOGGER.warn("增加${lowClassName}失败, ${lowClassName}=" + ${lowClassName}
                    + ", errorCode=" + ex.get${upClassName}Result());
            return "error";
        } catch (Exception ex) {
            LOGGER.warn("增加${lowClassName}异常, ${lowClassName}=" + ${lowClassName}, ex);
            return "error";
        }

        modelMap.addAttribute("${lowClassName}", ${lowClassName});

        return "success";
    }

    /**
     * 修改${upClassName}
     *
     * @param orderNo
     * @param modelMap
     * @return
     */
    @RequestMapping(value = "/${lowClassName}/add${upClassName}", method = RequestMethod.POST)
    public String update${upClassName}(@Valid ${upClassName} ${lowClassName}, ModelMap modelMap) {
        try {
            ${lowClassName}OperateManager.update${upClassName}(${lowClassName});
            LOGGER.info("修改${lowClassName}成功, ${lowClassName}=" + ${lowClassName});
        } catch (${upClassName}Exception ex) {
            LOGGER.warn("修改${lowClassName}失败, ${lowClassName}=" + ${lowClassName}
                    + ", errorCode=" + ex.get${upClassName}Result());
            return "error";
        } catch (Exception ex) {
            LOGGER.warn("修改${lowClassName}异常, ${lowClassName}=" + ${lowClassName}, ex);
            return "error";
        }

        modelMap.addAttribute("${lowClassName}", ${lowClassName});

        return "success";
    }

}